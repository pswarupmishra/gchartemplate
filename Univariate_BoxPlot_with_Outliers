let allValues = [];

// Set variables
const yField = "value";             // Field to plot
const orientation = "vertical";     // "vertical" | "horizontal"
const showOutliers = true;          // Toggle outliers ON/OFF

// Collect values
context.panel.data.series.forEach((s) => {
  const yValues = s.fields.find((f) => f.name === yField).values.toArray();
  allValues = allValues.concat(yValues);
});

// Sort values
allValues.sort((a, b) => a - b);

// Quartile function
function quantile(arr, q) {
  const pos = (arr.length - 1) * q;
  const base = Math.floor(pos);
  const rest = pos - base;
  if ((arr[base + 1] !== undefined)) {
    return arr[base] + rest * (arr[base + 1] - arr[base]);
  } else {
    return arr[base];
  }
}

// Stats
const min = allValues[0];
const q1 = quantile(allValues, 0.25);
const median = quantile(allValues, 0.5);
const q3 = quantile(allValues, 0.75);
const max = allValues[allValues.length - 1];
const boxData = [[min, q1, median, q3, max]];

// Compute outliers (1.5 * IQR rule)
const IQR = q3 - q1;
const lowerFence = q1 - 1.5 * IQR;
const upperFence = q3 + 1.5 * IQR;

let outlierData = [];
if (showOutliers) {
  allValues.forEach(val => {
    if (val < lowerFence || val > upperFence) {
      if (orientation === "vertical") {
        outlierData.push([0, val]); // x=category index, y=value
      } else {
        outlierData.push([val, 0]); // horizontal flip
      }
    }
  });
}

// Axis setup based on orientation
const xAxis = orientation === "vertical"
  ? { type: 'category', data: [yField], name: yField }
  : { type: 'value', name: yField };

const yAxis = orientation === "vertical"
  ? { type: 'value', name: yField }
  : { type: 'category', data: [yField], name: yField };

return {
  tooltip: {
    trigger: 'item',
    formatter: (param) => {
      if (param.seriesType === 'boxplot') {
        const [min, q1, median, q3, max] = param.data;
        return `
          Variable: ${yField}<br>
          Min: ${min.toFixed(2)}<br>
          Q1: ${q1.toFixed(2)}<br>
          Median: ${median.toFixed(2)}<br>
          Q3: ${q3.toFixed(2)}<br>
          Max: ${max.toFixed(2)}
        `;
      } else if (param.seriesType === 'scatter') {
        return `Outlier: ${orientation === "vertical" ? param.value[1] : param.value[0]}`;
      }
    },
  },
  xAxis,
  yAxis,
  series: [
    {
      name: yField,
      type: 'boxplot',
      data: boxData,
      itemStyle: {
        color: '#a0c4ff',
        borderColor: '#4361ee'
      }
    },
    ...(showOutliers ? [{
      name: 'Outliers',
      type: 'scatter',
      data: outlierData,
      symbolSize: 8,
      itemStyle: { color: 'red' }
    }] : [])
  ]
};
